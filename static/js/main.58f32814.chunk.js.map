{"version":3,"sources":["HI_logo.png","facebook.413893b7.svg","instagram.8b73ec2e.svg","twitter.29663de0.svg","github.c1193649.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","GetEvents","props","state","my_events","fetch","method","headers","then","response","json","data","setState","events","this","console","log","map","event","idx","locations","description","st_timestamp","Date","startTime","toLocaleString","end_timestamp","endTime","length","e_string","substr","maps_link","latitude","longitude","className","class","name","href","Component","App","src","HI_logo","alt","FB","IG","TWITTER","GIT","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iHAAAA,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,+C,gBCA3CD,EAAOC,QAAU,IAA0B,gD,gBCA3CD,EAAOC,QAAU,IAA0B,8C,gBCA3CD,EAAOC,QAAU,IAA0B,6C,2RC+BrCC,E,YACF,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,UAAW,IAHI,E,iFAOE,IAAD,OAClBC,MAAM,sCAAsC,CAC1CC,OAAQ,MACRC,QAAS,CACP,eAAgB,sBAGnBC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAEF,EAAKC,SAAS,CAACR,UAAWO,EAAKE,c,+BAc3B,IACAT,EAAcU,KAAKX,MAAnBC,UAER,OADAW,QAAQC,IAAI,iBAAkBZ,GAE5B,6BACCA,EAAUa,KAAI,SAACC,EAAOC,GACrB,IAAIC,EAAYF,EAAME,UAAU,GAChCL,QAAQC,IAAI,cAAcI,EAAUC,aACpC,IAAIC,EAAe,IAAIC,KAAqB,IAAhBL,EAAMM,WAAgBC,iBAC9CC,EAAgB,IAAIH,KAAmB,IAAdL,EAAMS,SAAcF,iBAC7CG,EAASF,EAAcE,OAEvBC,EAAWP,EAAe,MADfI,EAAcI,OAAO,GAAIF,EAAO,GAE3CG,EAAYX,EAAUY,SAAW,IAAMZ,EAAUa,UACrD,OACE,yBAAKC,UAAU,aACf,0BAAMC,MAAM,OACXjB,EAAMkB,KACP,6BACCP,EACD,6BACA,uBAAGQ,KAAM,oCAAqCN,GAC7CX,EAAUC,aAEX,uC,GAxDYiB,aAqETC,EA1Ff,WACE,OAEE,4BAAQL,UAAU,cAChB,6BACA,yBAAKM,IAAKC,IAASP,UAAU,cAAcQ,IAAI,SAC/C,6BACA,uBAAGL,KAAK,yCACR,yBAAKG,IAAKG,IAAIT,UAAU,WAAWQ,IAAI,cACvC,uBAAGL,KAAK,0CACR,yBAAKG,IAAKI,IAAIV,UAAU,WAAWQ,IAAI,eACvC,uBAAGL,KAAK,oCAAmC,yBAAKG,IAAKK,IAASX,UAAU,WAAWQ,IAAI,aACvF,uBAAGL,KAAK,uCAAsC,yBAAKG,IAAKM,IAAKZ,UAAU,WAAWQ,IAAI,YACtF,6BACA,6BACA,kBAAC,EAAD,QCbcK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlD,MAAK,SAAAmD,GACjCA,EAAaC,kB","file":"static/js/main.58f32814.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/HI_logo.bd555f22.png\";","module.exports = __webpack_public_path__ + \"static/media/facebook.413893b7.413893b7.svg\";","module.exports = __webpack_public_path__ + \"static/media/instagram.8b73ec2e.8b73ec2e.svg\";","module.exports = __webpack_public_path__ + \"static/media/twitter.29663de0.29663de0.svg\";","module.exports = __webpack_public_path__ + \"static/media/github.c1193649.c1193649.svg\";","import React, {Component} from 'react';\nimport { render } from \"react-dom\";\nimport HI_logo from './HI_logo.png';\nimport FB from './facebook.413893b7.svg';\nimport IG from './instagram.8b73ec2e.svg';\nimport TWITTER from './twitter.29663de0.svg';\nimport GIT from './github.c1193649.svg';\nimport './App.css';\n\n\nfunction App() {\n  return (\n    /*<div className=\"App\">*/\n    <header className=\"App-header\">\n      <br />\n      <img src={HI_logo} className=\"App-HI-logo\" alt=\"logo\"/>\n      <br />\n      <a href=\"https://www.facebook.com/hackillinois\">\n      <img src={FB} className=\"App-logo\" alt=\"facebook\" /></a>\n      <a href=\"https://www.instagram.com/hackillinois\">\n      <img src={IG} className=\"App-logo\" alt=\"instagram\" /></a>\n      <a href=\"https://twitter.com/hackillinois\"><img src={TWITTER} className=\"App-logo\" alt=\"twitter\" /></a>\n      <a href=\"https://www.github.com/hackillinois\"><img src={GIT} className=\"App-logo\" alt=\"github\" /></a>\n      <br />\n      <br />\n      <GetEvents/>\n    </header>\n    /*</div>*/\n  );\n}\n\nclass GetEvents extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        my_events: [],\n      };\n    }\n//Multiply time by 1000\n    componentDidMount() {\n      fetch('https://api.hackillinois.org/event/',{\n        method: \"GET\",\n        headers: {\n          'Content-Type': 'application/json',\n        }\n      })\n      .then(response => response.json())\n      .then(data => {\n          //console.log(data.events);\n          this.setState({my_events: data.events});\n            //()=>{console.log(\"Component state: \",this.state);})\n      });\n    }\n//<p key={idx}> {event.name} </p>\n     /*return(\n        <div>\n        {my_events.map((event, idx) => {\n          return (\n            <input type=\"button\" class=\"Events\" value={event.name} />\n          )\n        }}\n        </div>*/\n\n    render() {\n      const { my_events } = this.state;\n      console.log(\"Render State: \", my_events);\n      return(\n        <div>\n        {my_events.map((event, idx) => {\n          var locations = event.locations[0]\n          console.log(\"Locations: \",locations.description);\n          var st_timestamp = new Date(event.startTime*1000).toLocaleString();\n          var end_timestamp = new Date(event.endTime*1000).toLocaleString();\n          var length = end_timestamp.length;\n          var end_time = end_timestamp.substr(10,(length-9));\n          var e_string = st_timestamp + \" - \" + end_time;\n          var maps_link = locations.latitude + \",\" + locations.longitude;\n          return (\n            <div className=\"container\">\n            <span class=\"app\">\n            {event.name}\n            <br />\n            {e_string}\n            <br />\n            <a href={'http://www.google.com/maps/place/'+ maps_link}>\n            {locations.description}\n            </a>\n            <br />\n            </span>\n            </div>\n          )\n        })}\n        </div>\n      )\n    }\n}\n\n// var my_events = new GetEvents();\n// my_events.componentDidMount();\n//render(<GetEvents />, document.getElementById('root'));\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}